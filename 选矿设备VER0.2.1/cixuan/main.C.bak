/*
*********************************************************************************************************
*                                                uC/OS-II
*                                          The Real-Time Kernel
*
*                          (c) Copyright 1992-2002, Jean J. Labrosse, Weston, FL
*                                           All Rights Reserved
*
*                                               EXAMPLE #3
*********************************************************************************************************
*/

#include "config.h"
#include "../include/cfg_net.h"

char * VERSION = "Ver 0.0.1";			//开机时显示的版本号
/*
*********************************************************************************************************
*                                              CONSTANTS
*********************************************************************************************************
*/
#define          TASK_START_ID      			 10                /* Application tasks                             */
#define          TASK_NET_ID             		 11
#define          TASK_GENCTRL_ID          		 12
#define          TASK_BACK_LIGHT_CTRL_ID         13
#define          TASK_4_ID          			 14
#define          TASK_LINK_ID       			 15
#define          TASK_READ_AD7680_ID        	 16
#define			 TASK_WORK_LED_ID   			 17

#define          TASK_START_PRIO     			 10                /* Application tasks priorities                  */
#define          TASK_NET_PRIO          		 11
#define          TASK_GENCTRL_PRIO        		 12
#define          TASK_BACK_LIGHT_CTRL_PRIO       13
#define          TASK_4_PRIO        			 14
#define          TASK_LINK_PRIO      			 15
#define          TASK_READ_AD7680_PRIO      	 16
#define			 TASK_WORK_LED_PRIO  			 17

/*define mux*/
OS_EVENT        *I2c_Sem;
OS_EVENT        *FLASH_Sem;
OS_EVENT        *Lcd_Sem;
OS_EVENT        *Back_Light_Ctrl_Mbox;
OS_EVENT  		*RecPackedFlag; 		
OS_EVENT  		*RecBufOverFlowFlag;	
OS_EVENT  		*RecTcpPackedFlag;	
OS_EVENT  		*RecPingPackedFlag;	


OS_STK TASK_START_STACK[300];
OS_STK TASK_READ_AD7680_STACK[400];
//OS_STK task2_stack[2000];
OS_STK TASK_LINK_STACK[100];
OS_STK TASK_NET_STACK[200];
//OS_STK task5_stack[500];
OS_STK TASK_WORK_LED_STK[32];
OS_STK TASK_BACK_LIGHT_CTRL_STACK[32];
OS_STK TASK_GENCTRL_STACK[512];
 
/*

*********************************************************************************************************
*                                             DATA TYPES
*********************************************************************************************************
*/

volatile DEV_STAT DevStat;
extern INT8U PageBuf1[512];

/*
*********************************************************************************************************
*                                              VARIABLES
*********************************************************************************************************
*/


//TASK_USER_DATA  TaskUserData[7];

//OS_EVENT       *MsgQueue;                             /* Message queue pointer                         */
//void           *MsgQueueTbl[20];                      /* Storage for messages                          */

/*
*********************************************************************************************************
*                                         FUNCTION PROTOTYPES
*********************************************************************************************************
*/
/*********************************************************************************************************
** 函数名称: Start_beep
** 功能描述: 蜂鸣器鸣叫三声
** 输　      入: 无
** 输　      出: 无
** 全局变量: 无
** 调用模块: 
**-------------------------------------------------------------------------------------------------------
** 作　者: 黄力国
** 日　期: 2005年1月10日
**-------------------------------------------------------------------------------------------------------
** 修改人: 
** 日　期: 
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void Start_beep(void)
{
	ToggleWD();
	Beep(100);
}
/*****************************************************************
 函数原型：	System_Init()
 功能描述：器件类初始化
 参数描述：	
				 
 返回值：	无
 
 作  者：	大连现代/刘及华
 日  期：	2004-09-17
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
*****************************************************************/
void System_Init(void)
{
	INT8U   i;
// 	INT8U   j;

	ToggleWD();

	SetBell(OFF);

	SleepMs(200);

	i = query_key_nsnd();			 //发现上电后总有按键中断, 先读个键值,把中断清掉
	Start_beep();								/* 开机后蜂鸣器提示*/
	SleepMs(200);

	/* 全局变量初始化*/

	//DevStat初始化
	memset((void*)&DevStat, 0x00, sizeof(DevStat));
	ReadParam();

	DevStat.err_occured = FALSE;
	DevStat.err_code = 0x0000;
	DevStat.id = 0x10;
	DevStat.mode = AUTO;
	DevStat.passwd = 0;
	DevStat.MOD_REG.reg[0x000C] = 0;	//禁止AGC输出

//  //add for debug
	memset(PageBuf1, 0xFF, sizeof(PageBuf1));
	FlashPageRead512(10, PageBuf1, 0);
	memcpy((void *)&DevStat.reset_times, (void *)PageBuf1, sizeof(DevStat.reset_times));
	DevStat.reset_times++;
	memcpy((void *)PageBuf1, (void *)&DevStat.reset_times, sizeof(DevStat.reset_times));
	FlashPageWrite512(10, PageBuf1, 0);
	InitImportantParameter();
//  DevStat.MOD_REG.reg[0x000C] = 1;    //使能AGC输出
//  DevStat.MOD_REG.reg[0x000D] = 400;  //目标厚度
//  //end

	i = query_key_nsnd();
	if ( i == KEY_CANCEL )	 //开机时按下CANCEL键，进入设置车号状态
	{
		(void)Get_Passwd();
	}


	//DisplayTimeEN = TRUE;		//允许刷新时间任务刷新时间

#ifdef QUICK_DEBUG
#else
	DisplayVersion(VERSION);
	DisplayID(DevStat.id);
	SleepMs(1000);
#endif

}
/*****************************************************************
 函数原型：	System_Init()
 功能描述：器件类初始化
 参数描述：	
				 
 返回值：	无
 
 作  者：	大连现代/刘及华
 日  期：	2004-09-17
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
*****************************************************************/
INT8U System_Check(void)
{

	ToggleWD();
	Lcd_Cls();
	lcddisp(1, 1, "系统自检中...");
	if ( DevStat.err_occured == TRUE )
		return notok;

	return ok;
}
/*********************************************************************************************************
** 函数名称: taskstart creates other task
** 功能描述: μCOS-II建立其它任务
** 输　入: 无
** 输　出: 无
** 全局变量: 无
** 调用模块: 
**
** 作　者: 黄力国
** 日　期: 2004年12月28日
**-------------------------------------------------------------------------------------------------------
** 修改人: 
** 日　期: 
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void  Create_Mux_Box(void)
{
	ToggleWD();

	/* I2c_bus uses*/
	I2c_Sem=OSSemCreate(1);
	FLASH_Sem = OSSemCreate(1);			/* 信号量用于互斥操作总线 */
	Lcd_Sem = OSSemCreate(1);

    RecPackedFlag=		OSSemCreate(0);
	RecBufOverFlowFlag=	OSSemCreate(0);
	RecTcpPackedFlag=	OSSemCreate(0);
	RecPingPackedFlag=	OSSemCreate(0);
	SendFlag=		    OSSemCreate(1);

	//RecIcmpQFlag=		OSQCreate(&RecIcmpQ[0],Q_Max_Size);
	RecTcpQFlag=		OSQCreate(&RecTcpQ[0],Q_Max_Size);
	RecUdpQFlag=		OSQCreate(&RecUdpQ[0],Q_Max_Size);
	Back_Light_Ctrl_Mbox = OSMboxCreate((void *)0);		//建立通讯时对时间显示和刷卡使能进行控制任务所需要的邮箱

}
/******************************************************************************
函数名称：DisplayVersion
功能描述：开机显示版本号
参数描述：
参数名称：	输入/输出？	类型		描述
version	输入		const char*		要显示的版本号，例如输入0x00 0x01 则显示0.0.1

返  回  值：无
				  
作      者	：刘及华
日      期：2004-09-02
修改历史：
	   日期		修改人		修改描述
	   ------		---------	-------------
******************************************************************************/
void DisplayVersion(const char * version)
{
	ToggleWD();

	Lcd_Cls();
#ifdef DEBUG
	lcddisp(1, 0, "测试");
#else
#endif
	lcddisp(1, 2, VERSION);

}

/*****************************************************************
函数原型：DisplayID
功能描述：显示ID号
参数描述：无
参数名称：	输入/输出？	类型		描述
-----------		-----------	------	   	-------
返  回  值：无
作      者	：刘及华

日      期	：2005-5-23
修改历史：
日期		修改人		修改描述
------		---------	-------------
*****************************************************************/
void DisplayID(INT32U id)
{
//     INT8U i = 0;
	INT8S buf[50];

	ToggleWD();

	lcddisp(2, 1, "ID号: ");

	buf[0] = ascii(id / 100000);
	buf[1] = ascii((id % 100000) / 10000);
	buf[2] = ascii((id % 10000) / 1000);
	buf[3] = ascii((id % 1000) / 100);
	buf[4] = ascii((id % 100) / 10);
	buf[5] = ascii(id % 10);
	buf[6] = '\0';
	lcddisp(2, 4, buf);
	return;
}
/******************************************************************************
 函数名称：InitImportantParameter
 功能描述：初始化关键参数
 参数描述：
 参数名称：	输入/输出？	类型		描述

 返  回  值：FLOK(0)-写入成功
				 FLNOTOK(0xFF)-前100页全废
				PRI	-	主FLASH失效
				SLV	-	从FLASH失效

 作      者	：刘及华
 日      期：2004-09-02
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
INT8U InitImportantParameter(void)
{
//	INT8U i = 0;

	ToggleWD();

	OS_ENTER_CRITICAL();
	(void)memset((void *)&DevStat, 0x00, sizeof(DevStat));			//参数全部初始化

	DevStat.err_occured = FALSE;
	DevStat.err_code = 0x0000;
	DevStat.id = 0x10;
	DevStat.mode = AUTO;
	DevStat.passwd = 0;

	DevStat.MOD_REG.reg[0x0009] = 1000;
	DevStat.MOD_REG.reg[0x000B] = 1000;
	//测试表
	DevStat.MOD_REG.reg[0x0010] = 0xFFFF;
	DevStat.MOD_REG.reg[0x0011] = 0x0000;
	DevStat.MOD_REG.reg[0x0012] = 0xCBD9;
	DevStat.MOD_REG.reg[0x0013] = 0x0082;
	DevStat.MOD_REG.reg[0x0014] = 0xA5EC;
	DevStat.MOD_REG.reg[0x0015] = 0x0104;
	DevStat.MOD_REG.reg[0x0016] = 0x8837;
	DevStat.MOD_REG.reg[0x0017] = 0x0186;
	DevStat.MOD_REG.reg[0x0018] = 0x7083;
	DevStat.MOD_REG.reg[0x0019] = 0x0208;
	DevStat.MOD_REG.reg[0x001A] = 0x5D39;
	DevStat.MOD_REG.reg[0x001B] = 0x028A;
	DevStat.MOD_REG.reg[0x001C] = 0x4D1B;
	DevStat.MOD_REG.reg[0x001D] = 0x030C;
	DevStat.MOD_REG.reg[0x001E] = 0x3F34;
	DevStat.MOD_REG.reg[0x001F] = 0x038E;
	DevStat.MOD_REG.reg[0x0020] = 0x33D3;
	DevStat.MOD_REG.reg[0x0021] = 0x0410;
	DevStat.MOD_REG.reg[0x0022] = 0x2A59;
	DevStat.MOD_REG.reg[0x0023] = 0x0492;
	DevStat.MOD_REG.reg[0x0024] = 0x2272;
	DevStat.MOD_REG.reg[0x0025] = 0x0514;
	DevStat.MOD_REG.reg[0x0026] = 0x1B7E;
	DevStat.MOD_REG.reg[0x0027] = 0x0596;
	DevStat.MOD_REG.reg[0x0028] = 0x1670;
	DevStat.MOD_REG.reg[0x0029] = 0x0618;
	DevStat.MOD_REG.reg[0x002A] = 0x0000;
	DevStat.MOD_REG.reg[0x002B] = 0xFFFF;
	OS_EXIT_CRITICAL();

	WriteParam();

	memset(PageBuf1, 0xFF, sizeof(PageBuf1));
//  FlashPageRead512(10, PageBuf1, 0);
//  memcpy((void *)&DevStat.reset_times, (void *)PageBuf1, sizeof(DevStat.reset_times));
	DevStat.reset_times = 0;
	memcpy((void *)PageBuf1, (void *)&DevStat.reset_times, sizeof(DevStat.reset_times));
	FlashPageWrite512(10, PageBuf1, 0);

	return ok;
}

/******************************************************************************
 函数名称：Get_Passwd
 功能描述：验证密码进入设置POS号状态
 参数描述：
 参数名称：	输入/输出？	类型		描述

 返  回  值：ok(0)-验证成功
				 notok(0xFF)-验证失败

 作      者	：刘及华
 日      期：2005-05-20
 修改历史：
		日期		修改人		修改描述
		------		---------	-------------
******************************************************************************/
INT8U Get_Passwd(void)
{
	INT8U i;
	INT8U key_seq[20];
	INT8S *password = (INT8S *)"22995757";

	ToggleWD();

	Lcd_Cls();
	lcddisp(1, 1, "请输入密码: ");

	Beep(50);
	SleepMs(50);
	Beep(50);
	SleepMs(50);
	Beep(50);
	SleepMs(1000);

	for ( i=0; i<8; i++ )			   //取得8个按键输入
	{
		do				   //only accept 0-9, '+', '-'
		{
			key_seq[i] = get_key();
		}while ( !( (key_seq[i]>='0' && key_seq[i]<='9') ) );

//      OSTimeDlyHMSM(0, 0, 0, 150);
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
	key_seq[i] = '\0';

	if ( strcmp((void *)key_seq, (void *)password) != 0 )	//密码错误
	{
		lcddisp(2, 2, "密码错误");
		OSTimeDlyHMSM(0, 0, 1, 0);
		return notok;
	}

	lcddisp(2, 2, "密码正确");
	lcddisp(3, 0, "执行格式化操作..");

	OS_ENTER_CRITICAL();

	InitImportantParameter();

	OS_EXIT_CRITICAL();

	OSTimeDlyHMSM(0, 0, 1, 0);		//为了显示能看清

	resetpos();

	return ok;
}
/*********************************************************************************************************
** 函数名称: TaskStart
** 功能描述: μCOS-II的第一个任务，通常由它初始化目标板和建立其它任务
** 输　入: 无
** 输　出: 无
** 全局变量: 无
** 调用模块: 
**
** 作　者: 陈明计
** 日　期: 2003年7月8日
**-------------------------------------------------------------------------------------------------------
** 修改人: 
** 日　期: 
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void Task_Start(void *pdata)  
{ /*在第1个任务中设置定时器0及中断*/
    UBYTE iii;
    #if OS_CRITICAL_METHOD == 3              /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr;
	#endif
	
	
	ToggleWD();

	pdata = pdata;							/* 避免编译警告 */
	
	Create_Mux_Box();						/* 创建任务需要的信号量*/
	TargetInit();						    /* 目标板初始化 */
	System_Init();
	//UBYTE EX_RAM *er;

//	OSTaskCreateExt(Task_Read_Ad7680,
//                    (void *)0,
//                    &TASK_READ_AD7680_STACK[399],
//                    TASK_READ_AD7680_PRIO,
//                    TASK_READ_AD7680_ID,
//                    &TASK_READ_AD7680_STACK[0],
//                    400,
//                    (void *)0,//&TaskUserData[TASK_4_ID]
//                    0);

	TaskStart_CreateTasks();				/* start任务创建任务*/
                 
	SetNetPort();
	InitNic(0);			//RTL8019芯片初始化,在global.c中定义
	Initial_arp();
	Tcp_Initial();
	Udp_Initial();
	
  	while(1)
	{ 
		OSTimeDly(4);
		do
		{
		    iii=Rec_Packet();
		}
		while(iii!=0);
	}
}


/*********************************************************************************************************
** 函数名称: taskstart creates other task
** 功能描述: μCOS-II建立其它任务
** 输　入: 无
** 输　出: 无
** 全局变量: 无
** 调用模块: 
**
** 作　者: 黄力国
** 日　期: 2004年12月28日
**-------------------------------------------------------------------------------------------------------
** 修改人: 
** 日　期: 
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
void TaskStart_CreateTasks(void)
{
//	INT8U i = 0;

	ToggleWD();

//    /*task 1*/
//    //建立读取AD值任务
////  i = OSTaskCreateExt(Task_Read_Ad7680,
////  					(void *)0,
////  					&TASK_READ_AD7680_STK[400 - 1],
////  					TASK_READ_AD7680_PRIO,
////  					TASK_READ_AD7680_ID,
////  					&TASK_READ_AD7680_STK[0],
////  					400,
////  					(void *)0,
////  					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

    /*task 2*/
    //建立AGC输出任务
//    i = OSTaskCreateExt(Task_Agc_Output,
//                        (void *)0,
//                        &TASK_AGC_OUTPUT_STK[200 - 1],
//                        TASK_CTRL_AGC_PRIO,
//                        TASK_CTRL_AGC_ID,
//                        &TASK_AGC_OUTPUT_STK[0],
//                        200,
//                        (void *)0,
//                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

////  /*task 2*/
////  //建立蜂鸣器任务
////  i = OSTaskCreateExt(Task_Beep,
////                      (void *)0,
////                      &TASK_BEEP_STK[TASK_STK_SMALL_SIZE - 1],
////                      TASK_BEEP_PRIO,
////                      TASK_BEEP_ID,
////                      &TASK_BEEP_STK[0],
////                      TASK_STK_SMALL_SIZE,
////                      (void *)0,
////                      OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
//    /*task 3*/
//    //建立串口0接收处理任务
//    i = OSTaskCreateExt(Task_Com0,
//                        (void *)0,
//                        &TASK_COM0_STK[TASK_STK_BIG_SIZE - 1],
//                        TASK_COM0_PRIO,
//                        TASK_COM0_ID,
//                        &TASK_COM0_STK[0],
//                        TASK_STK_BIG_SIZE,
//                        (void *)0,
//                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
//
//    /*task 4*/
//    //建立串口1接收处理任务
////	i = OSTaskCreateExt(Task_Com1,
////						(void *)0,
////						&TASK_COM1_STK[TASK_STK_BIG_SIZE - 1],
////						TASK_COM1_PRIO,
////						TASK_COM1_ID,
////						&TASK_COM1_STK[0],
////						TASK_STK_BIG_SIZE,
////						(void *)0,
////						OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

	/*task 5*/
	//建立工作指示灯任务
//	i = OSTaskCreateExt(Task_Work_Led,
//						(void *)0,
//						&TASK_WORK_LED_STK[TASK_STK_TINY_SIZE - 1],
//						TASK_WORK_LED_PRIO,
//						TASK_WORK_LED_ID,
//						&TASK_WORK_LED_STK[0],
//						TASK_STK_TINY_SIZE,
//						(void *)0,
//						OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

  /*task 6*/
  //建立读取DI任务
//  i = OSTaskCreateExt(Task_Switch,
//  					(void *)0,
//  					&TASK_SWITCH_STK[TASK_STK_TINY_SIZE - 1],
//  					TASK_SWITCH_PRIO,
//  					TASK_SWITCH_ID,
//  					&TASK_SWITCH_STK[0],
//  					TASK_STK_TINY_SIZE,
//  					(void *)0,
//  					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
//
//
//  /*task 7*/
//  //建立读取AD值任务
//  i = OSTaskCreateExt(Task_Read_TLC2543,
//  					(void *)0,
//  					&TASK_READ_TLC2543_STK[TASK_STK_SMALL_SIZE - 1],
//  					TASK_READ_TLC2543_PRIO,
// 					TASK_READ_TLC2543_ID,
//  					&TASK_READ_TLC2543_STK[0],
//  					TASK_STK_SMALL_SIZE,
//  					(void *)0,
//  					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

//  /*task 8*/
//  //背光控制任务
//  i = OSTaskCreateExt(Task_Back_Light_Ctrl,
//  					(void *)0,
//  					&TASK_BACK_LIGHT_CTRL_STK[TASK_STK_TINY_SIZE - 1],
//  					TASK_BACK_LIGHT_CTRL_PRIO,
//  					TASK_BACK_LIGHT_CTRL_ID,
//  					&TASK_BACK_LIGHT_CTRL_STK[0],
//  					TASK_STK_TINY_SIZE,
//  					(void *)0,
//  					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
//
//  /*task 9*/
//  //建立总控制任务
//  i = OSTaskCreateExt(TaskGeneralCtrl,
//  					(void *)0,
//  					&TASK_GENCTRL_STK[TASK_STK_TCPIP_SIZE - 1],
//  					TASK_GENCTRL_PRIO,
//  					TASK_GENCTRL_ID,
//  					&TASK_GENCTRL_STK[0],
//  					TASK_STK_TCPIP_SIZE,
//  					(void *)0,
//  					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);



//OSTaskCreateExt(Task_Link,
//				(void *)0,
//				&TASK_LINK_STACK[99],
//				TASK_LINK_PRIO,
//				TASK_LINK_ID,
//				&TASK_LINK_STACK[0],
//				100,
//				(void *)0,//&TaskUserData[TASK_4_ID]
//				0);
//
//
//OSTaskCreateExt(TaskGeneralCtrl,
//				(void *)0,
//				&TASK_GENCTRL_STACK[511],
//				TASK_GENCTRL_PRIO,
//				TASK_GENCTRL_ID,
//				&TASK_GENCTRL_STACK[0],
//				512,
//				(void *)0,//&TaskUserData[TASK_4_ID]
//				0);
//
//
//OSTaskCreateExt(Task_Net,
//				(void *)0,
//				&TASK_NET_STACK[199],
//				TASK_NET_PRIO,
//				TASK_NET_ID,
//				&TASK_NET_STACK[0],
//				200,
//				(void *)0,//&TaskUserData[TASK_4_ID]
//				0);



OSTaskCreateExt(Task_Work_Led,
				(void *)0,
				&TASK_WORK_LED_STK[32 - 1],
				TASK_WORK_LED_PRIO,
				TASK_WORK_LED_ID,
				&TASK_WORK_LED_STK[0],
				32,
				(void *)0,
				0);



//OSTaskCreateExt(Task_Back_Light_Ctrl,
//				(void *)0,
//				&TASK_BACK_LIGHT_CTRL_STACK[31],
//				TASK_BACK_LIGHT_CTRL_PRIO,
//				TASK_BACK_LIGHT_CTRL_ID,
//				&TASK_BACK_LIGHT_CTRL_STACK[0],
//				32,
//				(void *)0,
//				0);


}


/*$PAGE*/
/*
*********************************************************************************************************
*                                                  MAIN
*********************************************************************************************************
*/
int main (void)
{   
	
    OSInit();                                   /* Initialize uC/OS-II                      */
    OSTaskCreateExt(Task_Start,
                    (void *)0,
                    &TASK_START_STACK[299],
                    TASK_START_PRIO,
                    TASK_START_ID,
                    &TASK_START_STACK[0],
                    300,
                    (void *)0,//&TaskUserData[TASK_4_ID]
                    0);
        
  	RecPackedFlag=		OSSemCreate(0);
	RecBufOverFlowFlag=	OSSemCreate(0);
	RecTcpPackedFlag=	OSSemCreate(0);
	RecPingPackedFlag=	OSSemCreate(0);
	SendFlag=		    OSSemCreate(1);

	RecIcmpQFlag=		OSQCreate(&RecIcmpQ[0],Q_Max_Size);
	RecTcpQFlag=		OSQCreate(&RecTcpQ[0],Q_Max_Size);
	RecUdpQFlag=		OSQCreate(&RecUdpQ[0],Q_Max_Size);

    OSStart();                                  /* Start multitasking                       */
	return 0;
}

/*$PAGE*/
/*
*********************************************************************************************************
*                                               STARTUP TASK
*********************************************************************************************************
*/
        void Timer1_Init(void)
{
OS_ENTER_CRITICAL();
    T1IR = 0xffffffff;
    T1TC = 0;
    T1TCR = 0x01;
    T1MCR = 0x03;
    T1MR0 = 0xffffff;//(Fpclk / OS_TICKS_PER_SEC);
OS_EXIT_CRITICAL();
}
    
        void Timer1(void)
{
	static 	uint8 	 m_10sec=0;
	static 	uint8 	 p_sec=0;
	static 	uint8	 p_min=0;
	uint8 num;
    	OS_ENTER_CRITICAL();
    	T1IR = 0x01;
//    T0MR0 += (Fpclk / OS_TICKS_PER_SEC);
	m_10sec++;
	if(m_10sec==100)
	{
		p_sec++;
		m_10sec=0;
		if(Ping_IP_TTL>0)
			Ping_IP_TTL--;
		for(num=0;num<MAX_NET_PORT;num++)
		{
			for(p_min=0;p_min<MAX_ARP_TERM;p_min++)
			{
				if(NetPort[num].ARP_TERM[p_min].TTL>0)
					NetPort[num].ARP_TERM[p_min].TTL--;
			}
			if(Gateway_IP_TTL>0)
				NetPort[num].Gateway_IP_TTL--;
		}
		if(p_sec==60)
		{
			p_min++;
			p_sec=0;
			if(p_min==60)
			{
				p_min=0;
			}
		}
	}
    	VICVectAddr = 0;            // 通知中断控制器中断结束
    	OS_EXIT_CRITICAL();
    //OSTimeTick();
}
